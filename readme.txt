This is a Scala project, using sbt with sbt-idea plugin. I used the Intellij IDEA 13 IDE for development 
and it is highly recommended.

Assuming sbt is installed on your path, and you have obtained the PealApp-lift source, you can do the following
actions. From the PealApp-lift directory on the command line,

1. sbt gen-idea
(This sets up the necessary Intellij IDEA project files)

Then you can open the PealApp-lift project in IDEA 13, make sure the Scala plugin is installed.

2. sbt run
(This runs PEALT on http://localhost:8080)

3. sbt assembly
(This creates the PealApp-lift-assembly-x.y.z.jar file in the target directory, the version number of the jar is 
defined in build.sbt)

The web front end is built in Lift web framework, but most of the Peal algorithmic code is written in pure Scala. 
The exception from this is the Peal input/Z3 output parsers, which are generated by ANTLR 3. The ANTLR grammar 
files are in the antlr directory. The ANTLR grammar editor I used is included in the root directory of this project
- antlrworks-1.5.2-complete.jar, simply double click on it (or run "java -jar antlrworks-1.5.2-complete.jar" on 
the command line) to launch its GUI. Make sure to change the preferences so the generated files go to 
PealParser/src/main/java. 

Once you get familiar with sbt, you might want to look at project/PealBuild.scala to understand the dependencies 
of various modules in PEALT, and how it's put together.

I tried to be as strict as I could in following TDD practices. Most of the classes (if not all) have testing 
counterparts (except GUI related classes in the top level). The intentions and behaviours of the main classes 
should be revealed by the test cases, so I made a point to avoid comments in my code when possible. I guess my 
successor will tell me if my belief is sound or not.

I almost always run the test suite from within IDEA. It's just my personal preference.